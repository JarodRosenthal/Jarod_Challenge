{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Self-healing Apache web-server on discounted Spot EC2",
    "Parameters": {
        "KeyName": {
          "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
          "Type": "AWS::EC2::KeyPair::KeyName",
          "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair"
        },
        "InstanceType" : {
          "Description" : "WebServer EC2 instance type",
          "Type" : "String",
          "Default" : "t3.small",
          "AllowedValues" : [ "t3.small", "t3.medium" ],
          "ConstraintDescription" : "Must be a valid EC2 instance type"
        },
        "VpcId" : {
          "Description" : "VPC for this stack",
          "Type" : "AWS::EC2::VPC::Id"
        },
        "Subnets":{
            "Description" : "Must select 3 Subnets for the ASG",
            "Type":"List<AWS::EC2::Subnet::Id>"
        },
        "SSHLocation" : {
          "Description" : "The IP address range that can be used to SSH to the EC2 instances",
          "Type": "String",
          "MinLength": "9",
          "MaxLength": "18",
          "Default": "0.0.0.0/0",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
          "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
        } 
    },
    "Mappings" : {
        "AWSInstanceType" : {
            "t3.small" : {"VM" : "HVM64"},
            "t3.medium" : {"VM" : "HVM64"}
        },
        "AWSRegionAMI" : {
            "us-east-1" : {"HVM64" : "ami-02e136e904f3da870"},
            "us-east-2" : {"HVM64" : "ami-074cce78125f09d61"},
            "us-west-1" : {"HVM64" : "ami-03ab7423a204da002"},
            "us-west-2" : {"HVM64" : "ami-013a129d325529d4d"}
        }
    },
    "Resources": {     
        "WebServer": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [
                    {"Fn::Sub": "${AWS::Region}a"},
                    {"Fn::Sub": "${AWS::Region}b"},
                    {"Fn::Sub": "${AWS::Region}c"}
                ],
                "Cooldown": 60,
                "DesiredCapacity": 1,
                "HealthCheckGracePeriod": 30,
                "HealthCheckType": "ELB",
                "MaxSize": 1,
                "MinSize": 1,
                "VPCZoneIdentifier": {"Ref": "Subnets"},
                "MixedInstancesPolicy": {
                    "LaunchTemplate": {
                        "LaunchTemplateSpecification": {
                            "LaunchTemplateName": {"Ref":"AWS::StackName"},
                            "Version": {"Fn::GetAtt" : ["WebServerTemplate","LatestVersionNumber"]}},
                        "Overrides": [{"InstanceType": {"Ref": "InstanceType"}},{"InstanceType": "t3a.small"}]},
                    "InstancesDistribution": {
                        "OnDemandBaseCapacity": 0,
                        "OnDemandPercentageAboveBaseCapacity": 0,
                        "SpotAllocationStrategy": "lowest-price",
                        "SpotMaxPrice": ""
                    }
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {"Ref":"AWS::StackName"},
                        "PropagateAtLaunch" : true
                    }
                ]
            },
            "UpdatePolicy": {
                "AutoScalingReplacingUpdate": {
                    "WillReplace": true
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": 1,
                    "Timeout": "PT3M"
                },
                "AutoScalingCreationPolicy": {
                    "MinSuccessfulInstancesPercent": 100
                }
            }
        },
        "WebServerTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Metadata":{
                "AWS::CloudFormation::Init":{
                    "config":{
                        "files":{
                            "/var/www/html/index.html":{
                                "content":{
                                    "Fn::Join":[
                                        "\n",
                                        [
                                            "<html>",
                                                "<head>",
                                                    "<title>We are SecNet!</title>",
                                                "</head>",
                                                "<body>",
                                                    "<h1>We are SecNet!</h1>",
                                                "</body>",
                                            "</html>"
                                        ]
                                    ]
                                },
                                "mode":"000750",
                                "owner":"ec2-user",
                                "group":"ec2-user"
                            }   
                        }
                    }
                }
            },
            "Properties": {
              "LaunchTemplateName": {"Ref": "AWS::StackName"},
              "LaunchTemplateData": {
                  "ImageId" : { "Fn::FindInMap" : [ "AWSRegionAMI", { "Ref" : "AWS::Region" },{ "Fn::FindInMap" : [ "AWSInstanceType", { "Ref" : "InstanceType" }, "VM" ] } ] },
                  "InstanceType"   : { "Ref" : "InstanceType" },
                  "KeyName"        : { "Ref" : "KeyName" },
                  "SecurityGroupIds": [ {"Ref": "WebServerSecurityGroup"} ],
                  "TagSpecifications": [{"ResourceType" : "volume", "Tags": [{"Key": "Name", "Value": {"Ref":"AWS::StackName"}}]}],
                  "UserData":{
                      "Fn::Base64":{
                          "Fn::Join":[
                              "\n",
                              [
                                "#!/bin/bash -xe",
                                "#### (-x) print a trace of simple commands (-e) exit immediately if a command fails",  
                                "exec > >(tee /var/log/ops.out|logger -t user-data -s 2>/dev/console) 2>&1",

                                "#### Exit with failure signal if UserData errors",
                                {"Fn::Sub": "trap '/opt/aws/bin/cfn-signal --exit-code 1 --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}' ERR >> /var/log/ops.out"},

                                "#### Run cfn-init. This invokes the Metadata specified above",
                                {"Fn::Sub": "/opt/aws/bin/cfn-init --region ${AWS::Region } --stack ${AWS::StackName} --resource WebServerTemplate >> /var/log/ops.out"},

                                "#### Install and setup Apache web server",
                                "yum install httpd -y",
                                "systemctl start httpd && sudo systemctl enable httpd",

                                "#### Modify ownership and permissions",
                                "usermod -a -G apache ec2-user",
                                "chown -R ec2-user:apache /var/www",

                                "#### Redirects port 80 to 443",
                                "sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 443",
                                "sudo iptables -t nat -A OUTPUT -p tcp --dport 80 -o lo -j REDIRECT --to-ports 443",
                                "sudo sh -c 'iptables-save > /etc/iptables.rules'",

                                "#### Sets up self-signed certificate",
                                "yum install -y mod_ssl",
                                "cd /etc/pki/tls/certs",
                                "./make-dummy-cert localhost.crt",
                                "sed -i '/^SSLCertificateKeyFile/ c#SSLCertificateKeyFile' /etc/httpd/conf.d/ssl.conf",
                                "systemctl restart httpd",
                                
                                "#### Validate correct server configuration, requires HTTP 200 code to proceed",
                                "bash -c 'while [[ \"$(curl -k -S -o /dev/null -w ''%{http_code}'' https://localhost/index.html)\" != \"200\" ]]; do sleep 5; done >> /var/log/ops.out'",

                                "#### Signals Success to CloudFormation",
                                {"Fn::Sub": "/opt/aws/bin/cfn-signal --exit-code 0 --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region} >> /var/log/ops.out"}
                                ]
                            ]
                        }
                    },
                    "BlockDeviceMappings":[{"DeviceName":"/dev/sda1","Ebs":{"VolumeSize":8}}]
                }
            }
        },
        "WebServerSecurityGroup" : {
          "Type" : "AWS::EC2::SecurityGroup",
          "Properties" : {
            "GroupDescription" : "HTTP/HTTPS open to the world and SSH from home Ip",
            "VpcId" : {"Ref": "VpcId"},
            "SecurityGroupIngress" : [
              {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
              {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"},
              {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
            ]
          }      
        }          
    }
}
